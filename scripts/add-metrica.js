const fs = require('fs');
const path = require('path');

const metricaCode = `
<!-- Yandex.Metrika counter -->
<script type="text/javascript" >
  (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
  m[i].l=1*new Date();
  for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
  k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
  (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  ym(102951378, "init", {
      clickmap:true,
      trackLinks:true,
      accurateTrackBounce:true
  });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/102951378" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
`;

function processDirectory(directory) {
  console.log(`üîç –°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${directory}`);
  
  try {
    const files = fs.readdirSync(directory);

    files.forEach(file => {
      const absolutePath = path.join(directory, file);
      
      try {
        const stat = fs.statSync(absolutePath);

        if (stat.isDirectory()) {
          processDirectory(absolutePath);
        } else if (path.extname(file).toLowerCase() === '.html') {
          processHtmlFile(absolutePath);
        }
      } catch (statError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É: ${absolutePath}`, statError.message);
      }
    });
  } catch (readDirError) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${directory}`, readDirError.message);
  }
}

function processHtmlFile(filePath) {
  console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: ${filePath}`);
  
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    if (content.includes('Yandex.Metrika counter')) {
      console.log(`‚è© –ü—Ä–æ–ø—É—Å–∫–∞—é (–º–µ—Ç—Ä–∏–∫–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞): ${filePath}`);
      return;
    }

    let modified = false;
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –í—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–¥ </head>
    if (content.includes('</head>')) {
      content = content.replace('</head>', metricaCode + '\n</head>');
      modified = true;
    } 
    // –í–∞—Ä–∏–∞–Ω—Ç 2: –í—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–¥ </body> –µ—Å–ª–∏ </head> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    else if (content.includes('</body>')) {
      content = content.replace('</body>', metricaCode + '\n</body>');
      modified = true;
    }
    // –í–∞—Ä–∏–∞–Ω—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    else {
      content += '\n' + metricaCode;
      modified = true;
      console.warn(`‚ö†Ô∏è –í—Å—Ç–∞–≤–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–≥–∏): ${filePath}`);
    }

    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${filePath}`);
    } else {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${filePath}`, error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
let targetDir = args[0] || path.join(__dirname, '..');

if (!fs.existsSync(targetDir)) {
  console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${targetDir}`);
  process.exit(1);
}

console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${targetDir}`);
processDirectory(targetDir);
console.log('üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
